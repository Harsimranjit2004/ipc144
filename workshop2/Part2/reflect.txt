///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #2 (P2)
Full Name  : Harsimranjit singh
Student ID#: 155452220
Email      : hsingh956
Section    : NNN

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////
1Ans:
 As we know that size store in float is less than double. so because of that sometimes while doing typecasting the float to other numbers some bit data may lost as while conversion computer round off the value to the nearest integer for example 1/3 => 0.33333333 so in binary after some times particular number of bits the bit sequence repeat itselft and the size of float is 4 byte so 
a particular number of bit stored in it (10010010010|01) if we store above number its sequence is break while saving in float which while converting to the int produce errored output
This output is same for all float conversion to the int conversion but not for double 

2Ans: 
    According to the concept of the promotion, while doing the arithematic operation on two different type operator the compiler itself convert the lower priority type number to higher priority number that is equal to the other number 

    in this case the priority of double is more than the in so compiler implicitly convert the interger to the double type to do the operations 
    all the print statement provide same output as  in
    1. 1st print statement 100.0 is double which is higher than int 
    2. in 2nd & 3rd print statement programmer itself explicitly change the type of one of the oprands into double so which lasts the output in double of all print statement

3Ans:
    a.
        money =7245
        result = money/100; it is done in two parts 
        1st as money and 100 are both integer so while dividing the same operator the result will always we same so manually the answer of this is 72.45 but as the result must be in int so compiler implicitly discard the floating point number and convert it into the interger which is 72 and while assignment to result variable both types are same so there were no promotion or narrowing of the numbers so the result have value 72
    b.
        the value are 
            $0.00
            $72
            $0.00
            $72
    c.
        The value of sample 1 and 3 are not correct because of the wrong format specifier in the print statement as the type of numbers are int and in format specifier we are providing the double foramt specifier
        

        
